<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart City Traffic Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        canvas {
            background-color: #f0f2f5;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        
        <!-- Header -->
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Smart City Traffic Management</h1>
            <p class="text-md text-gray-600 mt-2">Using Dijkstra's algorithm to find the fastest route.</p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            <!-- Controls Panel -->
            <div class="lg:col-span-1 bg-white p-6 rounded-lg shadow-lg h-fit">
                <h2 class="text-2xl font-semibold mb-4 border-b pb-3">Route Planner</h2>
                
                <div class="space-y-4">
                    <div>
                        <label for="startNode" class="block text-sm font-medium text-gray-700 mb-1">Starting Point</label>
                        <select id="startNode" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"></select>
                    </div>
                    
                    <div>
                        <label for="endNode" class="block text-sm font-medium text-gray-700 mb-1">Destination</label>
                        <select id="endNode" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"></select>
                    </div>
                    
                    <button id="findRouteBtn" class="w-full bg-indigo-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                        Find Fastest Route
                    </button>
                </div>

                <div id="result" class="mt-6 p-4 bg-gray-50 rounded-md border border-gray-200 hidden">
                    <h3 class="font-semibold text-lg mb-2">Result:</h3>
                    <p id="totalTime" class="text-indigo-600 font-bold"></p>
                    <p id="path" class="text-gray-700 mt-1 break-words"></p>
                </div>
            </div>

            <!-- City Map Canvas -->
            <div class="lg:col-span-2">
                <canvas id="cityCanvas"></canvas>
            </div>

        </div>
    </div>

    <script>
        // --- DATA SETUP ---
        // Define the city layout: intersections (nodes) and roads (edges)
        const cityData = {
            intersections: {
                'Downtown': { x: 200, y: 300, name: 'Downtown' },
                'Uptown': { x: 250, y: 150, name: 'Uptown' },
                'Suburb': { x: 450, y: 400, name: 'Suburb' },
                'Airport': { x: 700, y: 100, name: 'Airport' },
                'Mall': { x: 500, y: 200, name: 'Mall' },
                'Hospital': { x: 50, y: 100, name: 'Hospital' },
                'Tech Park': { x: 400, y: 50, name: 'Tech Park' }
            },
            roads: [
                { from: 'Downtown', to: 'Uptown', time: 10 },
                { from: 'Downtown', to: 'Suburb', time: 15 },
                { from: 'Downtown', to: 'Hospital', time: 12 },
                { from: 'Uptown', to: 'Mall', time: 12 },
                { from: 'Uptown', to: 'Tech Park', time: 7 },
                { from: 'Suburb', to: 'Mall', time: 5 },
                { from: 'Suburb', to: 'Airport', time: 30 },
                { from: 'Mall', to: 'Airport', time: 8 },
                { from: 'Mall', to: 'Tech Park', time: 9 },
                { from: 'Hospital', to: 'Uptown', time: 6 },
                { from: 'Tech Park', to: 'Airport', time: 18 }
            ]
        };

        // --- DOM ELEMENTS ---
        const canvas = document.getElementById('cityCanvas');
        const ctx = canvas.getContext('2d');
        const startNodeSelect = document.getElementById('startNode');
        const endNodeSelect = document.getElementById('endNode');
        const findRouteBtn = document.getElementById('findRouteBtn');
        const resultDiv = document.getElementById('result');
        const totalTimeP = document.getElementById('totalTime');
        const pathP = document.getElementById('path');

        // --- INITIALIZATION ---
        window.onload = () => {
            setup();
        };

        window.onresize = () => {
            setupCanvas();
            drawGraph();
        };

        function setup() {
            // Populate dropdowns with intersection names
            const intersectionNames = Object.keys(cityData.intersections);
            intersectionNames.forEach(name => {
                startNodeSelect.innerHTML += `<option value="${name}">${name}</option>`;
                endNodeSelect.innerHTML += `<option value="${name}">${name}</option>`;
            });
            // Set a default different end node
            endNodeSelect.selectedIndex = 1;

            // Setup canvas and draw initial map
            setupCanvas();
            drawGraph();

            // Add event listener to the button
            findRouteBtn.addEventListener('click', handleFindRoute);
        }

        function setupCanvas() {
            const container = canvas.parentElement;
            canvas.width = container.offsetWidth;
            canvas.height = container.offsetHeight > 400 ? container.offsetHeight : 500; // Minimum height
        }

        // --- DRAWING FUNCTIONS ---
        function drawGraph(highlightedPath = []) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            const pathEdges = new Set();
            for (let i = 0; i < highlightedPath.length - 1; i++) {
                pathEdges.add(`${highlightedPath[i]}-${highlightedPath[i+1]}`);
                pathEdges.add(`${highlightedPath[i+1]}-${highlightedPath[i]}`);
            }

            // 1. Draw all roads
            cityData.roads.forEach(road => {
                const isHighlighted = pathEdges.has(`${road.from}-${road.to}`);
                drawRoad(road, isHighlighted);
            });

            // 2. Draw all intersections
            Object.values(cityData.intersections).forEach(intersection => {
                const isHighlighted = highlightedPath.includes(intersection.name);
                drawIntersection(intersection, isHighlighted);
            });
        }

        function drawIntersection(intersection, isHighlighted) {
            ctx.beginPath();
            ctx.arc(intersection.x, intersection.y, 10, 0, 2 * Math.PI);
            ctx.fillStyle = isHighlighted ? '#10B981' : '#3B82F6'; // Green if highlighted, else blue
            ctx.fill();
            ctx.strokeStyle = '#FFFFFF';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.closePath();

            ctx.fillStyle = isHighlighted ? '#047857' : '#1E40AF';
            ctx.font = 'bold 12px Inter';
            ctx.textAlign = 'center';
            ctx.fillText(intersection.name, intersection.x, intersection.y + 25);
        }

        function drawRoad(road, isHighlighted) {
            const fromNode = cityData.intersections[road.from];
            const toNode = cityData.intersections[road.to];

            ctx.beginPath();
            ctx.moveTo(fromNode.x, fromNode.y);
            ctx.lineTo(toNode.x, toNode.y);
            ctx.strokeStyle = isHighlighted ? '#10B981' : '#9CA3AF'; // Green if highlighted, else gray
            ctx.lineWidth = isHighlighted ? 4 : 2;
            ctx.stroke();
            ctx.closePath();

            // Draw travel time on the road
            const midX = (fromNode.x + toNode.x) / 2;
            const midY = (fromNode.y + toNode.y) / 2;
            ctx.fillStyle = '#FFFFFF';
            ctx.fillRect(midX - 12, midY - 10, 24, 20); // Small white background for text
            ctx.fillStyle = isHighlighted ? '#047857' : '#4B5563';
            ctx.font = '12px Inter';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(road.time, midX, midY);
        }

        // --- DIJKSTRA'S ALGORITHM ---
        function dijkstra(startName, endName) {
            const times = {};
            const prev = {};
            const pq = new Set();
            const graph = cityData.intersections;
            const roads = cityData.roads;

            // Build an adjacency list for easier lookup
            const adj = {};
            Object.keys(graph).forEach(name => {
                adj[name] = [];
                times[name] = Infinity;
                prev[name] = null;
                pq.add(name);
            });
            
            roads.forEach(({ from, to, time }) => {
                adj[from].push({ node: to, time });
                adj[to].push({ node: from, time }); // Assuming two-way roads
            });

            times[startName] = 0;

            while (pq.size > 0) {
                // Get the node with the smallest time (this is a simple, less efficient priority queue)
                let u = null;
                pq.forEach(node => {
                    if (u === null || times[node] < times[u]) {
                        u = node;
                    }
                });
                
                if (u === endName) break; // Found the destination
                if (u === null) break; // No path

                pq.delete(u);

                adj[u].forEach(neighbor => {
                    const alt = times[u] + neighbor.time;
                    if (alt < times[neighbor.node]) {
                        times[neighbor.node] = alt;
                        prev[neighbor.node] = u;
                    }
                });
            }

            // Reconstruct path
            const path = [];
            let current = endName;
            if (prev[current] || current === startName) {
                while (current) {
                    path.unshift(current);
                    current = prev[current];
                }
            }
            
            return { path, time: times[endName] };
        }

        // --- EVENT HANDLER ---
        function handleFindRoute() {
            const startNode = startNodeSelect.value;
            const endNode = endNodeSelect.value;

            if (startNode === endNode) {
                alert("Start and destination points cannot be the same.");
                return;
            }

            // Run the algorithm
            const { path, time } = dijkstra(startNode, endNode);

            // Redraw the graph with the highlighted path
            drawGraph(path);

            // Display results
            if (path.length > 1 && time !== Infinity) {
                totalTimeP.textContent = `Total Time: ${time} minutes`;
                pathP.textContent = `Path: ${path.join(' → ')}`;
                resultDiv.classList.remove('hidden');
            } else {
                totalTimeP.textContent = 'No route found.';
                pathP.textContent = `Could not find a path from ${startNode} to ${endNode}.`;
                resultDiv.classList.remove('hidden');
            }
        }
    </script>

</body>
</html>
